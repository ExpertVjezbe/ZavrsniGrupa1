@page "/rijeseniradnizadatci"
@using ZavrsniSeminar.Models;
@inject HttpClient httpClient;
@inject NavigationManager navManager;
@inject IJSRuntime jsRun;

<h3 class="svizadatcinaslov">Popis svih riješenih zadataka</h3>
<br>

@if (IsError==true)
	{
		<p>Dogodila se greška, molimo kontaktirajte administratora.</p>
	}

<ul class="list-group" @onsubmit="RijeseniZadatci">
	@foreach (var item in rijeseniZadatci)
	{
		<li class="list-group-item active" aria-current="true">Id Zadatka: @item.Id <button class="btn btn-outline-light" @onclick="()=>Obrisi(item.Id)">Obrisati Zadatak</button></li>
		<li class="list-group-item">Naziv Zadatka: @item.todo</li>
		<li class="list-group-item">Ime Radnika: @item.radnikIme</li>
		<li class="list-group-item">Prezime Radnika: @item.radnikPrezime</li>
		<li class="list-group-item">Opis Posla: @item.opisPosla</li>
		<li class="list-group-item">Datum: @item.datum</li>
		<br>
		<br>
	}
</ul>



@code {

	[Parameter]
	public int Id { get; set; }
	public bool IsDone = true;
	public bool IsError = false;
	public List<RadniZadatak> rijeseniZadatci = new List<RadniZadatak>();

	protected override async Task OnInitializedAsync()
	{
		var result = await httpClient.GetAsync("https://expertvjezbeapi.azurewebsites.net/api/ToDoSeminars/");
		if (result.IsSuccessStatusCode)
		{
			rijeseniZadatci = await result.Content.ReadFromJsonAsync<List<RadniZadatak>>();
			rijeseniZadatci = rijeseniZadatci.Where(x => x.IsDone == true).OrderBy(x => x.todo).ToList();
		}
	}


	public async Task RijeseniZadatci()
	{
		var result = await httpClient.PostAsJsonAsync($"https://expertvjezbeapi.azurewebsites.net/api/ToDoSeminars/IsDone/{Id}", "");
		if (result.IsSuccessStatusCode)
		{
			rijeseniZadatci = await result.Content.ReadFromJsonAsync<List<RadniZadatak>>();
			rijeseniZadatci = rijeseniZadatci.Where(x => x.IsDone == true).OrderBy(x => x.todo).ToList();
		}
	}

	public void Obrisi(int id)
	{
		navManager.NavigateTo($"obrisizadatak/{id}");
	}
}
